#pragma checksum "C:\Users\keval\Downloads\New folder (5)\helperland-master\helperland\Helperland\Views\ServiceProvider\ServiceHistory.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6fa0afa94126104896cbb811421648714a24d902"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ServiceProvider_ServiceHistory), @"mvc.1.0.view", @"/Views/ServiceProvider/ServiceHistory.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\keval\Downloads\New folder (5)\helperland-master\helperland\Helperland\Views\_ViewImports.cshtml"
using Helperland;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\keval\Downloads\New folder (5)\helperland-master\helperland\Helperland\Views\_ViewImports.cshtml"
using Helperland.Core;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\keval\Downloads\New folder (5)\helperland-master\helperland\Helperland\Views\_ViewImports.cshtml"
using Helperland.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\keval\Downloads\New folder (5)\helperland-master\helperland\Helperland\Views\_ViewImports.cshtml"
using Helperland.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\keval\Downloads\New folder (5)\helperland-master\helperland\Helperland\Views\_ViewImports.cshtml"
using Helperland.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\keval\Downloads\New folder (5)\helperland-master\helperland\Helperland\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\keval\Downloads\New folder (5)\helperland-master\helperland\Helperland\Views\_ViewImports.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6fa0afa94126104896cbb811421648714a24d902", @"/Views/ServiceProvider/ServiceHistory.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7898f82f3c4ec8ef7012c9ce577661f7fb4dcfaf", @"/Views/_ViewImports.cshtml")]
    public class Views_ServiceProvider_ServiceHistory : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\keval\Downloads\New folder (5)\helperland-master\helperland\Helperland\Views\ServiceProvider\ServiceHistory.cshtml"
  
    ViewData["Title"] = "Service History";
    Layout = "~/Views/Shared/_UserLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""d-flex justify-content-between align-items-center"">
    <h2 class=""title"">Payment Status</h2>
    <button class=""export-btn"" onclick=""ExportExcel();"">Export</button>
</div>

<div class=""div-table"">
    <table class=""table card-view-small-screen"" id=""tblServiceHistory"">
        <thead>
            <tr>
                <td>Service Id <img class=""sort-img""");
            BeginWriteAttribute("alt", " alt=\"", 466, "\"", 472, 0);
            EndWriteAttribute();
            WriteLiteral("> </td>\n                <td>Service Date <img class=\"sort-img\"");
            BeginWriteAttribute("alt", " alt=\"", 535, "\"", 541, 0);
            EndWriteAttribute();
            WriteLiteral("> </td>\n                <td>Customer details <img class=\"sort-img\"");
            BeginWriteAttribute("alt", " alt=\"", 608, "\"", 614, 0);
            EndWriteAttribute();
            WriteLiteral("> </td>\n            </tr>\n        </thead>\n    </table>\n</div>\n\n");
            DefineSection("UserLayoutScripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        var table;

        $(document).ready(function () {

            table = $('#tblServiceHistory').DataTable({
                paging: true,
                pagingType: ""full_numbers"",
                processing: true,
                serverSide: true,
                filter: true,
                ordering: true,
                searching: false,
                info: true,
                ajax: {
                    url: ""/ServiceProvider/GetServiceRequestHistoryList"",
                    type: ""POST"",
                    datatype: ""json"",
                    dataSrc: 'data'
                },
                oLanguage: {
                    sInfo: ""Total Records: _TOTAL_"",
                },
                columns: [
                    {
                        data: 'serviceRequestId',
                        name: 'ServiceRequestId',
                    },
                    {
                        name: 'ServiceDateTime',
                        render: fun");
                WriteLiteral(@"ction (data, type, row) {
                            return ""<img src='../img/admin-panel/calendar2.png' class='me-1' alt='calenderIcon'><span> "" +
                                ServiceStartDate(row.serviceStartDate) + ""</span ><br> "" +
                                ""<img src='../img/admin-panel/layer-14.png' class='me-1' alt='clockIcon'>"" +
                                ServiceTime(row.serviceStartDate, 0) + "" - "" +
                                ServiceTime(row.serviceStartDate, row.serviceHours);
                        }
                    },
                    {
                        name: 'CustomerName',
                        render: function (data, type, row) {
                            return ""<div class='align-items-center d-flex'><img src='../img/admin-panel/layer-15.png' class='me-2' /><div>"" +
                                row.user.firstName + "" "" + row.user.lastName + ""<br>"" +
                                row.serviceRequestAddresses[0].addressLine1 + "" "" + row.serviceRequestA");
                WriteLiteral(@"ddresses[0].addressLine2 + ""<br>"" +
                                row.serviceRequestAddresses[0].postalCode + "" "" + row.serviceRequestAddresses[0].city + ""</div></div>"";
                        }
                    }
                ],
                dom: '<""top"">rt<""bottom""lip><""clear"">',
                responsive: true,
                order: [[0, ""desc""]]
            });

            //click on row column
            $('#tblServiceHistory tbody').on('click', 'td', function () {

                var rowData = table.row(this).data();

                $('#preloader').removeClass(""d-none"");

                $.ajax({
                    url: '/ServiceProvider/GetServiceRequestWithCustomerDetails',
                    type: 'post',
                    dataType: 'json',
                    data: { ""serviceRequestId"": rowData.serviceRequestId },
                    success: function (resp) {

                        $('#preloader').addClass(""d-none"");

                        $(""#lblSpServiceRequestDateTime"")");
                WriteLiteral(@".html(""<b>"" + ServiceStartDate(resp.data.serviceStartDate) + ""</b> "" +
                            ""<b>"" + ServiceTime(resp.data.serviceStartDate, 0) + ""-"" +
                            ServiceTime(resp.data.serviceStartDate, resp.data.serviceHours) + ""</b>"");
                        $(""#lblSpDuration"").text(resp.data.serviceHours);
                        $(""#lblSpServiceRequestId"").text(resp.data.serviceRequestId);

                        $(""#lblSpExtraServices"").text(resp.extraServiceRequest);
                        $(""#lblSpTotalAmount"").html(""<b>"" + resp.data.totalCost + "" $</b>"");

                        $(""#lblSpCustomerName"").text(resp.data.user.firstName + "" "" + resp.data.user.lastName);

                        var serviceAddress = resp.data.serviceRequestAddresses[0];

                        $(""#lblSpServiceAddress"").text(serviceAddress.addressLine1 + "" "" + serviceAddress.addressLine2 + "", "" + serviceAddress.postalCode + "" "" + serviceAddress.city)
                        $(""#lblSpPhone"").text(s");
                WriteLiteral(@"erviceAddress.mobile);   
                        $(""#lblSpEmail"").text(resp.data.user.email);

                        $(""#lblSpComments"").text(resp.data.comments);

                        if (resp.data.hasPets == false) {
                            $(""#lblSpHasPet"").html(""<img src='../img/admin-panel/not-included.png'/> I don't have pets at home"");
                        }
                        else {
                            $(""#lblSpHasPet "").html(""<img src='../img/admin-panel/included.png'/> I have pets at home"");
                        }

                        $('#SpPanelServiceDetailModel').modal({
                            backdrop: 'static',
                            keyboard: false
                        });
                        $('#SpPanelServiceDetailModel').modal('show');
                    },
                    error: function (err) {
                        console.log(err);
                    }
                });
            });

        });

        function ExportExcel");
                WriteLiteral(@"() {
            var tblData = table.data();
            let csvContent = ""data:text/csv;charset=utf-8,"";

            csvContent += ""Service Id, Service Details, Customer Detail\n"";

            for (let i = 0; i < tblData.length; i++) {
                csvContent += tblData[i].serviceRequestId + "","" +
                    ServiceStartDate(tblData[i].serviceStartDate) + "" "" + ServiceTime(tblData[i].serviceStartDate, 0) + "" - "" +
                    ServiceTime(tblData[i].serviceStartDate, tblData[i].serviceHours) + "","";

                if (tblData[i].user == null) {
                    csvContent += "","";
                }
                else {
                    csvContent += tblData[i].user.firstName + "" "" + tblData[i].user.lastName + "","";
                }

                csvContent = csvContent + ""\n"";
            }
            
            var encodedUri = encodeURI(csvContent);
            var link = document.createElement(""a"");
            link.setAttribute(""href"", encodedUri);
            link.setA");
                WriteLiteral("ttribute(\"download\", \"ServiceHistory.csv\");\n            document.body.appendChild(link); \n            link.click();\n        }\n\n    </script>\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
