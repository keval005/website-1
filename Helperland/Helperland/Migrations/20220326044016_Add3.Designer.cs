// <auto-generated />
using System;
using Helperland.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Helperland.Migrations
{
    [DbContext(typeof(HelperlandContext))]
    [Migration("20220326044016_Add3")]
    partial class Add3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Helperland.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Helperland.Models.ContactU", b =>
                {
                    b.Property<int>("ContactUsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UploadFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ContactUsId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Helperland.Models.FavoriteAndBlocked", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TargetUserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteAndBlocked");
                });

            modelBuilder.Entity("Helperland.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("Friendly")
                        .HasColumnType("decimal(2,1)");

                    b.Property<decimal>("OnTimeArrival")
                        .HasColumnType("decimal(2,1)");

                    b.Property<decimal>("QualityOfService")
                        .HasColumnType("decimal(2,1)");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RatingFrom")
                        .HasColumnType("int");

                    b.Property<int>("RatingTo")
                        .HasColumnType("int");

                    b.Property<decimal>("Ratings")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("RatingFrom");

                    b.HasIndex("RatingTo");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Helperland.Models.ServiceRequest", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Distance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("ExtraHours")
                        .HasColumnType("float");

                    b.Property<bool?>("HasIssue")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPets")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("PaymentDone")
                        .HasColumnType("bit");

                    b.Property<bool>("PaymentDue")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentTransactionRefNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("RecordVersion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("RefundedAmount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("ServiceHourlyRate")
                        .HasColumnType("decimal(8,2)");

                    b.Property<double>("ServiceHours")
                        .HasColumnType("float");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ServiceStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SpacceptedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SPAcceptedDate");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceRequest");
                });

            modelBuilder.Entity("Helperland.Models.ServiceRequestAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("ServiceRequestAddress");
                });

            modelBuilder.Entity("Helperland.Models.ServiceRequestExtra", b =>
                {
                    b.Property<int>("ServiceRequestExtraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServiceExtraId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.HasKey("ServiceRequestExtraId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("ServiceRequestExtra");
                });

            modelBuilder.Entity("Helperland.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Helperland.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankTokenId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsRegisteredUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentGatewayUserRef")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserProfilePicture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("WorksWithPets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Helperland.Models.UserAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressId")
                        .HasName("PK_UserAddresses");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("Helperland.Models.Zipcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ZipcodeValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Zipcode");
                });

            modelBuilder.Entity("Helperland.Models.City", b =>
                {
                    b.HasOne("Helperland.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_City_State")
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Helperland.Models.FavoriteAndBlocked", b =>
                {
                    b.HasOne("Helperland.Models.User", "TargetUser")
                        .WithMany("FavoriteAndBlockedTargetUsers")
                        .HasForeignKey("TargetUserId")
                        .HasConstraintName("FK_FavoriteAndBlocked_User")
                        .IsRequired();

                    b.HasOne("Helperland.Models.User", "User")
                        .WithMany("FavoriteAndBlockedUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_FavoriteAndBlocked_FavoriteAndBlocked")
                        .IsRequired();

                    b.Navigation("TargetUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helperland.Models.Rating", b =>
                {
                    b.HasOne("Helperland.Models.User", "RatingFromNavigation")
                        .WithMany("RatingRatingFromNavigations")
                        .HasForeignKey("RatingFrom")
                        .HasConstraintName("FK_Rating_User")
                        .IsRequired();

                    b.HasOne("Helperland.Models.User", "RatingToNavigation")
                        .WithMany("RatingRatingToNavigations")
                        .HasForeignKey("RatingTo")
                        .HasConstraintName("FK_Rating_User1")
                        .IsRequired();

                    b.HasOne("Helperland.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("Ratings")
                        .HasForeignKey("ServiceRequestId")
                        .HasConstraintName("FK_Rating_ServiceRequest")
                        .IsRequired();

                    b.Navigation("RatingFromNavigation");

                    b.Navigation("RatingToNavigation");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Helperland.Models.ServiceRequest", b =>
                {
                    b.HasOne("Helperland.Models.User", "ServiceProvider")
                        .WithMany("ServiceRequestServiceProviders")
                        .HasForeignKey("ServiceProviderId")
                        .HasConstraintName("FK_ServiceRequest_User1");

                    b.HasOne("Helperland.Models.User", "User")
                        .WithMany("ServiceRequestUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ServiceRequest_User")
                        .IsRequired();

                    b.Navigation("ServiceProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helperland.Models.ServiceRequestAddress", b =>
                {
                    b.HasOne("Helperland.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("ServiceRequestAddresses")
                        .HasForeignKey("ServiceRequestId")
                        .HasConstraintName("FK_ServiceRequestAddress_ServiceRequest");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Helperland.Models.ServiceRequestExtra", b =>
                {
                    b.HasOne("Helperland.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("ServiceRequestExtras")
                        .HasForeignKey("ServiceRequestId")
                        .HasConstraintName("FK_ServiceRequestExtra_ServiceRequest")
                        .IsRequired();

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("Helperland.Models.UserAddress", b =>
                {
                    b.HasOne("Helperland.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserAddresses_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helperland.Models.Zipcode", b =>
                {
                    b.HasOne("Helperland.Models.City", "City")
                        .WithMany("Zipcodes")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Zipcode_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Helperland.Models.City", b =>
                {
                    b.Navigation("Zipcodes");
                });

            modelBuilder.Entity("Helperland.Models.ServiceRequest", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("ServiceRequestAddresses");

                    b.Navigation("ServiceRequestExtras");
                });

            modelBuilder.Entity("Helperland.Models.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Helperland.Models.User", b =>
                {
                    b.Navigation("FavoriteAndBlockedTargetUsers");

                    b.Navigation("FavoriteAndBlockedUsers");

                    b.Navigation("RatingRatingFromNavigations");

                    b.Navigation("RatingRatingToNavigations");

                    b.Navigation("ServiceRequestServiceProviders");

                    b.Navigation("ServiceRequestUsers");

                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
